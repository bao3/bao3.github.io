<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黑洞]]></title>
  <link href="bao3.org/atom.xml" rel="self"/>
  <link href="bao3.org/"/>
  <updated>2017-05-21T15:48:01+08:00</updated>
  <id>bao3.org/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[没用]]></title>
    <link href="bao3.org/15201542683812.html"/>
    <updated>2018-03-04T17:04:28+08:00</updated>
    <id>bao3.org/15201542683812.html</id>
    <content type="html"><![CDATA[
<p>测试而已</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打造多用户 ShadowsocksR VPS 过程]]></title>
    <link href="bao3.org/14910699523430.html"/>
    <updated>2017-04-02T02:05:52+08:00</updated>
    <id>bao3.org/14910699523430.html</id>
    <content type="html"><![CDATA[
<p>这是我自己的安装过程，非常方便，核心功能 lnmp 和 resilio sync 使用 docker 实现，省太多事了。
主要功能是：建立一个网页客户界面，方便管理 SSR 参数；shadowsocksR 读取每一个用户独立的 SSR 参数并启动；数据库默认只能被本机使用；</p>

<h1 id="toc_0">安装 Docker</h1>

<p>参考<a href="https://docs.docker.com/engine/installation/#docker-variants">这里的文章</a>  进行 Docker 安装，我使用的是 <strong>Ubuntu</strong> 所以要看这里<a href="https://docs.docker.com/engine/installation/linux/ubuntu/"> Docker for Ubuntu</a>，请务必注意自己的系统版本:</p>

<pre><code>sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
sudo apt-get update -y &amp;&amp; sudo apt-get install docker-ce -y 

   
</code></pre>

<h1 id="toc_1">安装 Resilio Sync</h1>

<p>这是因为我偶尔有时候需要 VPS 跟我的笔记本同步一些数据，你不使用 Btsync 的话，就可以不安装，请跳过。  </p>

<pre><code>DATA_FOLDER=~/sync
WEBUI_PORT=8888
mkdir -p  $DATA_FOLDER/folders  
sudo docker run -d --name Sync  \
     -p 127.0.0.1:$WEBUI_PORT:8888 -p 55555 \
     -v $DATA_FOLDER:/mnt/sync \
     --restart=on-failure resilio/sync
</code></pre>

<p>然后在你自己的电脑上使用 :
<code>ssh -N -L 9888:127.0.0.1:8888 username@your.vps.ip.or.domain</code>
打开你的浏览器，网址输入 <strong>127.0.0.1:9888</strong> 就可以配置 Btsync 同步，从些之后你要跟你的 VPS 之间传输什么文件或者要做备份，就方便多了。</p>

<h1 id="toc_2">安装 lnmp</h1>

<p>如果你要制作基于数据库的 shadowsocks 多用户使用，这一步建议你还是要进行的，这一步将会为你直接配置好数据库、web、php ，简单省事。</p>

<pre><code>DOCKER_FOLDER=~/docker
cd $DOCKER_FOLDER\
    &amp;&amp; git clone https://github.com/bao3/mini_lnmp.git \
    &amp;&amp; cd mini_lnmp
</code></pre>

<p>接下来就是模仿 <strong>~/mini_lnmp/nginx_conf/default.conf</strong> 写自己的网站配置，然后把自己的网站数据库放在 <strong>~/mini_lnmp/sql</strong> ，把自己的网站证书放在 <strong>ssl</strong> 下面，将网站目录放在 <strong>webroot</strong> 。启动我们的网页服务器，记住 <code>sql</code> 里的数据库文件在第一次启动时，是自动导入，省心太多了，是不是？</p>

<pre><code>docker run -d --restart=always -v ~/mini_lnmp:/mnt  \
        -p 127.0.0.1:1222:22 -p 80:80 -p 443:443   \
        -p 127.0.0.1:3306:3306 --name lnmp bao3/mini_lnmp
</code></pre>

<h1 id="toc_3">安装多用户版 shadowsocksr</h1>

<p>十分建议你将 ss 服务端换成 shadowsocksR，也就是 SSR，主要是这个客户端既可以兼容旧的 SS 又支持新的混淆，非常的方便和安全，而且围绕它的周边软件非常多。</p>

<pre><code>cd ~ \
    &amp;&amp; git clone -b manyuser https://github.com/shadowsocksr-backup/shadowsocksr.git \
    &amp;&amp; cd shadowsocksr \
    &amp;&amp; bash initcfg.sh \
    &amp;&amp; sed -i &quot;s/API_INTERFACE =.*$/API_INTERFACE = &#39;sspanelv3ssr&#39; /&quot; userapiconfig.py \
    &amp;&amp; sed -i &#39;s/&quot;host&quot;:.*/&quot;host&quot;: &quot;127.0.0.1&quot; ,/&#39; usermysql.json \
    &amp;&amp; sed -i &#39;s/&quot;user&quot;:.*/&quot;user&quot;: &quot;sspanel&quot; ,/&#39; usermysql.json \
    &amp;&amp; sed -i &#39;s/&quot;password&quot;:.*/&quot;password&quot;: &quot;sspanel&quot; ,/&#39; usermysql.json \
    &amp;&amp; sed -i &#39;s/&quot;db&quot;:.*/&quot;db&quot;: &quot;sspanel&quot; ,/&#39; usermysql.json
</code></pre>

<p>然后修改 <code>userapiconfig.py</code> <code>usermysql.json</code> <code>user-config.json</code>等等，这个就属于 SSR 的配置问题咯。
<strong>但是</strong> 请确保你的系统安装了 <code>python</code>,<code>pip</code>,<code>setuptools</code>,然后还要安装 <code>pip install cymysql</code> 用以让 shadowsocksR 使用数据库方式来连接</p>

<pre><code>sudo apt install python-pip -y
export LC_ALL=C
pip install cymysql
</code></pre>

<p><code>python server.py</code> 看看能不能运行，OK 的话，就可以使用 supervisord 来保持后台了。</p>

<h1 id="toc_4">安装 Supervisor 保持后台运行</h1>

<pre><code>sudo apt install supervisor -y \
sudo  echo_supervisord_conf &gt; /etc/supervisord.conf
sudo vim /etc/supervisord.conf   
</code></pre>

<p>在最后一行，加入：</p>

<pre><code>  [program:ssr]
  command=/usr/bin/python /home/bao3/shadowsocksr/server.py
  user=bao3
</code></pre>

<h1 id="toc_5">完工</h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Vultr上安装 Arch linux]]></title>
    <link href="bao3.org/14701463847239.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463847239.html</id>
    <content type="html"><![CDATA[
<h1 id="toc_0"><mark>广告时间</mark></h1>

<p>在所有用过的 VPS服务商中，我一直信赖 <code>Vultr</code>，首先是日本线路质量比较可靠，其次价格平民，只要 5$/月（首次还送钱给你），最后就是最重要的，免费送你不限制的 Snapshot功能，让你克隆（备份）整机。</p>

<p>请一定使用<a href="http://www.vultr.com/?ref=6813064">!我的链接</a> 来注册试用（ 双方获利 💰）：<a href="http://www.vultr.com/?ref=6813064">bao3的 Vultr 邀请</a>📎，这将资助我一直提供匿名服务。</p>

<h1 id="toc_1">VPS 操作系统的选择</h1>

<p>　　VPS有很多系统可选，通常都是用 Linux 的一些发行版，在这些发行版中，有一些虽然用的人多，可是安装软件后期分非常麻烦，例如 Debian 官方源里都是旧软件，这一点也不符合我们长期使用 VPS以及日后升级软件的需求，还有一些则要手动工作量多一点，比如 CentOS，还有活跃一点的 Ubuntu，但 Ubuntu多数是 deb分发，也不利于我们自定义。综合了很久，最后我将的 VPS操作系统从 FreeBSD 换到了 <mark>ArchLinux</mark>。这两个系统虽然分属于是 BSD-like Unix 和 Linux，不过理念非常像，有非常完备的官方手册，足以解决我们日常的问题。</p>

<p>所以下面的部分都是使用 ArchLinux 来进行，而这个系统是 Vultr 官方所以不支持的，所以此文的目的就教你如何在 Vultr 上使用 ArchLinux 。</p>

<pre><code>你的收益: 一次付出，子嗣无忧 
</code></pre>

<h1 id="toc_2">下载 iso安装盘</h1>

<p>登录你的 Vultr ，请不要关键是去点下图中的 “Deploy New Instance”，我们要先准备光盘，所以请你点击 <code>💿ISOs</code> 输入 iso的地址，让 Vultr给你下载好。
<img src="media/14518870323173/downloadISO.png" alt="downloadISO"/>
　　ArchLinux 的光盘下载网址 <a href="https://www.archlinux.org/download/">https://www.archlinux.org/download/</a> ，找到你想要的节点，点进去，复制 ISO的 URL
　　
　　<img src="media/14518870323173/14518892017207.jpg" alt=""/></p>

<p>比如我使用的地址：
<code>http://mirror.rackspace.com/archlinux/iso/2016.01.01/archlinux-2016.01.01-dual.iso</code>  </p>

<p>然后粘贴到上面 💿ISOs 这个里面，这样 Vultr 就开始帮你下载了。</p>

<h1 id="toc_3">创建系统</h1>

<p>　　点击上图中 <code>Deploy New Instance</code> 一个新的。</p>

<blockquote>
<ol>
<li><mark>只</mark>建议你使用 <mark>SSD套餐</mark></li>
<li>千万不要选  <mark>SATA</mark> （更多存储空间）那就郁闷了，因为有可能会莫名各种小毛病，影响后面的安装，<mark>会死得很惨</mark>。</li>
<li>并且 SATA套餐不能使用 Snapshot 免费备份功能而 SSD可以，基于此，相当于多了一个免费的备份镜像，数据是数据是无价的。 </li>
</ol>

<p>　
　　选择系统时，使用你刚才下载的 iso ( <code>Custom</code> &gt; <code>My ISOs</code> &gt; <code>archlinux-XXXX.iso</code> )，在创建好之后系统根本不会自动安装好 Arch Linux，只不过是用光盘启动了而已。<br/>
<img src="media/14518870323173/vultrdeply.png" alt="vultrdeply"/></p>
</blockquote>

<h1 id="toc_4">开始安装</h1>

<p>　　我相信你应该是一个具有动手能力的人，因为接下来的安装需要使用很多命令行指令。请在 VPS控制台 上选使用 VNC Console的方式来使用新创建的 VPS。  </p>

<h2 id="toc_5">硬盘分区</h2>

<p>　　整个安装过程中最核心的地方就是硬盘分区。原因在于 Vultr是基于 KVM的虚拟机，而我们又是用的 SSD ，所以是基于 BIOS + GPT的系统。而在默认情况下咱们的引动器 Grub只能支持 BIOS+ MBR 或者 EFI + GPT 的方式。Vultr 恰是个混合模式，会导致 Grub不引导的。<br/>
 1.     首先我们必须分出一个 bios安装分区，用于存放存放标准的 Grub 的引导文件。<br/>
 2.  如果你要承载 Web类服务，例如<strong>网站</strong>或者<strong>私有云</strong> ( <strong><em>owncloud</em></strong>)，那么我们最好单独分一个 Swap 。<br/>
 3. 默认情况下我们直接使用剩余的 <strong>SSD</strong> 作为整个系统磁盘，不单独分区了。<br/>
正面就开始咯：</p>

<pre><code class="language-shell"> gdisk /dev/vda
 n
 回车 (屏幕显示 1-28,Default 1 )
 回车 (屏幕显示 default = 2048, or {+-}size )
 +2M
 EF02 （类型代码默认为 8300，要手动改）
</code></pre>

<p>截图如下：<img src="media/14518870323173/VultrEF02.png" alt="VultrEF02"/></p>

<p>　　剩下的空间就是你自己自由支配，我的就仅供参考（与平时的分区没有区别），注意看图片中一定会有一个 <mark>BIOS</mark> 分区，另外图片中冒号后面是空白的都表示是直接按了 <code>回车</code>，这是成功的关键:</p>

<p><img src="media/14518870323173/VultrSSD.png" alt="VultrSSD"/></p>

<p><strong>　　当然最后还要写盘</strong>，这个我就不说按哪个键了。  </p>

<h2 id="toc_6">开始安装</h2>

<p>　　分区已经分好了，并且已经使用 ISO光盘启动了，接下来就是分区了，Arch Linux也有类似于 FreeBSD的交互式安装过程，不过在这里还是要用手动的过程，毕竟我也是第一次安装 Arch Linux 。 Vultr因为可以使用镜像来克隆，所以一次安装，永远安逸。</p>

<p>　　不过你需要注意的是，如果你的分区跟我不太一样，那接下来的步骤你需要有些调整，通常的调整就是 <code>/dev/vda1</code> <code>/dev/vda2</code> <code>/dev/vda3</code>这些编号有所不同。我只会依照我的来写。</p>

<pre><code> mkswap /dev/vda2 -L SWAP
 swapon /dev/vda2
 mkfs.ext4 /dev/vda3 -L ArchOS
 mount /dev/vda3 /mnt
</code></pre>

<p>　　好了，至此所有准备工作都已经完成了，我们开始安装系统核心了。<br/>
 <code>
 pacstrap /mnt base base-devel net-tools
</code>
　　这是要安装基本系统以及一些必要的套件，其中 <code>net-tools</code>是我额外加上的，因为这样可以在安装完使用诸如 <code>ifconfig</code> <code>nslookup</code>等等的小工具。经过等待（*通常为 2分钟 *左右），系统就已经完全OK了。</p>

<p>　　不过此时的系统还没有引导器 <em>bootloader</em> ,因此我们需要为系统安装一下：<br/>
 <code>
 arch-chroot /mnt
 pacman -Sy grub
 mkinitcpio -p linux
 grub-install /dev/vda
 grub-mkconfig -o /boot/grub/grub.cfg
</code></p>

<h2 id="toc_7">配置网络连接</h2>

<ol>
<li>其实操作上来说，以上安装就已经可以重启你的 VPS 享受乐趣，不过在此之前，先要做一些小的配置。</li>
</ol>

<p><code>配置DHCP</code>，这一步比较简单，在你的命令行下接着输入：
<code>systemctl enable dhcpcd</code></p>

<p>或者是</p>

<p><code>systemctl enable  dhcpcd@eth0</code></p>

<p>通常你会看到 ( Created symlink from /etc/systemd/system/multi-user.target.wants/dhcpcd.service to /usr/lib/systemd/system/dhcpcd （或者@eth0）.service.) </p>

<ol>
<li><p>重启前，记得使用 <code>passwd</code> 修改一下你的 root 密码，以利于下一步 ssh从你的 PC上登录，摆脱网页登录的烦恼，请一定要记住此密码，这是用来管理系统的密码切记。</p>

<pre><code>passwd
</code></pre>

<p>输入你的密码，在你输入的时候是不显示密码的，但是不用担心，这是 Linux / Unix 机制造成。</p></li>
</ol>

<p>　　此时你修改的是 Root 用户的密码，但我们平时不应该使用此用户来登录，所以你需要创建一个普通用户以及设置用户密码，这个用户名及密码将会是你远程连接 VPS所使用的。使用用户 <code>mylove</code> 登录后，需要使用 sudo 来执行系统管理命令
　　
　　<code>useradd -m -G wheel -s /bin/bash  mylove</code>
　　<code>passwd mylove</code>
　　</p>

<hr/>

<p>OK,启动你的机器试一下吧，并使用 mylove 登录一下吧！</p>

<hr/>

<h2 id="toc_8">远程连接</h2>

<p>在机器重启的过程，你也不必闲着，准备一个工具，从现在开始，我们要用自己的电脑客户端来连接。如果你是 Linux / Unix / Mac ，就直接使用终端 ssh 命令 如果是 Windows 就使用 Putty 或者 Xshell ，两者都是免费的。</p>

<blockquote>
<p>提醒，SSH 连接涉及你的服务器安全，请一定要去官方网站下载工具，不要去网上找什么汉化版、修改版，以免这些工具利用你的 ssh 连接获取你的服务器密码、植入木马、作为攻击跳板等</p>
</blockquote>

<p>针对 Mac ，打开 <strong>终端</strong>，输入
<code>
ssh mylove@your.vps.ip.address
</code>
　　使用你的 IP 地址替换后半部分，连接时会询问你是不是要添加 （ yes/no )，你就选 yes 。然后会让你登入普通用户 mylove 的密码，登入成功后，可能 再接着输入 <code>su -</code> 从成变身成管理员（ 需要你输入管理员密码 ）。</p>

<ul>
<li>安装后有还有些额外调整，但不是必需的例如 hostname, locale, timezone，你完全可以不设置重启后再慢慢调整</li>
<li><p>以下命令是用于设置时区及改 VPS 主机名称，另外优选最快的软件安装源，井号 （ # )的部分不会影响命令执行，你可以直接复制粘贴的。</p>

<pre><code class="language-shell">rm /etc/localtime
ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime #设置时区
hostnamectl set-hostname vps-jp  #设置主机名称叫 vps-jp

</code></pre></li>
</ul>

<h2 id="toc_9">安装 yaourt</h2>

<p>这部分是额外的设定，ArchLinux 使用 <strong><em>pacman</em></strong>来管理包，但是有时候这些包更新慢，我们可以使用___yaourt___ 来代替，可称为神器。我们需要修改 <code>/etc/pacman.conf</code>，使用 <code>nano /etc/pacman.conf</code> (你也可以使用 vi ) ,在文件最后加入以下代码：</p>

<pre><code class="language-Shell">[archlinuxfr]
SigLevel = Optional TrustAll
Server = http://repo.archlinux.fr/$arch
</code></pre>

<p><code>Control + X</code> 保存( 选择 &ldquo;yes &rdquo; ) ，并退出</p>

<p>然后使用 <code>pacman -Syu yaourt</code> 安装。此后，你就可以使用普通用户 <code>mylove</code> 登录然后直接 <code>yaourt -Sy  软件包名称</code>来帮你安装所需的软件， Enjoy~ it !</p>

<p><strong><em>完结</em></strong></p>

<h1 id="toc_10">额外的软件</h1>

<p>　　这一部分主要是用来介绍如何安装一些常用软件，本身并没有想作为本文的主要内容，不过我想我就作为自己备忘来记录，如果你看不懂，甚至调试有问题， sorry 憋人不提供解答 💋。</p>

<h2 id="toc_11">shandowsocks Strongswan Ocserv</h2>

<p>　　安装过程非常简单，切换到普通用户 <code>mylove</code> 下，输入 <code>yaourt -S shadowsocks-libev strongswan ocserv</code> 然后就开始问你一些问题，然后就开始编译了，你根本不必担心什么，因为这是绝大多数用户都验证过的配置。只是你要看清楚问你的问题是“编辑 PKGUID”（ 选 n）还是问你“是否继续构建” （选 yes），然后就会问你是否要安装。
　　</p>

<h2 id="toc_12">备份你的 VPS</h2>

<p>　　尽管你已经安装好了这些必备软件，但是请不要急着从网上找资料来配置它们，你首先要做的就是备份。记住，数据是无价的，而如果因为配置错了浪费太多重建时间更是无价的。
　　Vultr 默认开放一个非常好用的主机克隆服务，叫“快照” Snapshot ，目前是免费向 SSD硬盘用户开放，所以你打开网页，先备份一下吧
　　登录你的 VPS，点击 <code>Snapshots</code>
　　<img src="media/14518870323173/14518954709903.jpg" alt=""/>
<br></p>

<p><img src="media/14518870323173/14518956019134.jpg" alt=""/></p>

<p>　　你需要等待好久。。。。。所以请起身看看你的娃或者喝杯🍻。</p>

<h2 id="toc_13">配置你的防火墙</h2>

<p>　　要想使用 VPS必须要开防火墙，而且防火墙还有另一个用处，就是 VPN功能一定要依赖防火墙。为了避免太麻烦，我直接发我的配置。你可以自己导入</p>

<pre><code># Generated by iptables-save v1.4.21 on Mon Jan  4 16:27:39 2016
*filter
:INPUT DROP [267469:59409891]
:FORWARD ACCEPT [1527284:116084980]
:OUTPUT ACCEPT [551995:57041906]
:sshguard - [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -m comment --comment &quot;Allow Localhost Access&quot; -j ACCEPT
-A INPUT -p tcp -m multiport --dports 20,21,22,43,53,80,443,500,3306,4500,4698,4430,8080 -m comment --comment &quot;SSH/ HTTP/ Shadowsock/ IPSec/ Ocserv &quot; -j ACCEPT
-A INPUT -p udp -m multiport --dports 20,21,22,43,53,80,443,500,3306,4500,4698,4430,8080 -m comment --comment &quot;SSH/ HTTP/ Shadowsock/ IPSec/ Ocserv &quot; -j ACCEPT
-A INPUT -p tcp -m multiport --dports 22000,60223,21025,33925,33452 -m comment --comment &quot;Syncthing TCP port&quot; -j ACCEPT
-A INPUT -p udp -m multiport --dports 22000,60223,21025,33925,33452 -m comment --comment &quot;Syncthing UDP port&quot; -j ACCEPT
-A INPUT -i eth0 -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j DROP
-A INPUT -i eth0 -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -m limit --limit 5/min --limit-burst 7 -j LOG --log-prefix &quot;Drop Sync&quot;
-A INPUT -i eth0 -f -m limit --limit 5/min --limit-burst 7 -j LOG --log-prefix &quot;Fragments Packets&quot;
-A INPUT -i eth0 -p tcp -m state --state NEW -m tcp --dport 22 -m recent --update --seconds 15 --name DEFAULT --mask 255.255.255.255 --rsource -j DROP
-A INPUT -i eth0 -p tcp -m state --state NEW -m tcp --dport 22 -m recent --set --name DEFAULT --mask 255.255.255.255 --rsource -j ACCEPT
-A INPUT -p icmp -m icmp --icmp-type 8 -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p udp -m multiport --dports 60000:61000 -m comment --comment &quot;Mosh server&quot; -j ACCEPT
-A INPUT -i eth0 -p udp -m udp --dport 1701 -j ACCEPT
-A INPUT -i eth0 -p tcp -m tcp --dport 1723 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 22 -j sshguard
-A INPUT -p tcp -m tcp --dport 3000 -j ACCEPT
-A FORWARD -i eth0 -o tun0 -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i tun0 -o eth0 -j ACCEPT
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -o lo -m comment --comment &quot;Allow Localhost output&quot; -j ACCEPT
-A OUTPUT -p udp -m multiport --dports 20,21,22,43,53,80,443,500,3306,4500,4698,4430,8080 -j ACCEPT
-A OUTPUT -p tcp -m multiport --dports 20,21,22,43,53,80,443,500,3306,4500,4698,4430,8080 -j ACCEPT
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -p icmp -m icmp --icmp-type 0 -m state --state RELATED,ESTABLISHED -j ACCEPT
COMMIT
# Completed on Mon Jan  4 16:27:39 2016
# Generated by iptables-save v1.4.21 on Mon Jan  4 16:27:39 2016
*mangle
:PREROUTING ACCEPT [649046914:490030784988]
:INPUT ACCEPT [458980340:332669236268]
:FORWARD ACCEPT [190065337:157361240288]
:OUTPUT ACCEPT [367048723:407521818509]
:POSTROUTING ACCEPT [557343262:564902311503]
-A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
COMMIT
# Completed on Mon Jan  4 16:27:39 2016
# Generated by iptables-save v1.4.21 on Mon Jan  4 16:27:39 2016
*nat
:PREROUTING ACCEPT [2700413:236807688]
:INPUT ACCEPT [1160470:78636937]
:OUTPUT ACCEPT [1142833:89039918]
:POSTROUTING ACCEPT [224659:13609002]
-A POSTROUTING -o eth0 -j MASQUERADE
COMMIT
# Completed on Mon Jan  4 16:27:39 2016
</code></pre>

<p>　　将这段代码在你的 VPS 里新建一个文件 <code>nano ~/firwall.txt</code> ，然后粘贴进去。然后使用 <code>iptables-restore &lt; ~/firwall.txt</code>
　　以上的这个规则默认拒绝所有连接到你的  VPS的请求，只保留常用的端口，由于我的 shadowsocks使用 4689端口，因此我开放了这个特别端口，你可以改成自己的；同时，系统自动建立 nat，你可以自由地在你的 strongswan （前面刚安装的）里配置任意的 IP地址段，也可以在 ocserv里配置了。
　　</p>

<h2 id="toc_14">配置Shadowsocks-libev</h2>

<p>　　我特意安装了这个版本，你不必担心，这货只是 Shadowsocks众多分支里我觉得非常不错的一个，而配置文件则是完全相同的。
　　<code>nano /etc/shadowsocks/config.json</code> ，然后粘贴上代码:</p>

<pre><code>{
    &quot;server&quot;:&quot;0.0.0.0&quot;,
    &quot;server_port&quot;:4698,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;YourPasswd&quot;,
    &quot;timeout&quot;:60,
    &quot;method&quot;:&quot;aes-256-cfb&quot;
    }
</code></pre>

<p>　　注意， 4698 要改成你自己的，并且要与防火墙里的配置相对应，至于 local port：1080 这个不起任何作用，仅当你用作客户端时才有用，但是保留它的好处是，你可以直接把这个配置文件复制到你电脑的客户端使用。
　　接下来就是设置 Shadosocks的开机自动启动。ArchLinux的牛逼之处就是全程使用 systemd管理，非常省心。代码就是：</p>

<pre><code>systemctl enable shadowsocks-libev@config #开机启动
systemctl start shadowsocks-libev@config  #立刻启动

systemctl restart shadowsocks-libev@config  #重启（用于改过配置）
netstat -npl | grep 4698   #查看配置有没有成功
ss | grep 4698    #查看有没有客户端成功连接
</code></pre>

<p>　　
　　以上代码直接复制执行就可以了，截图如下：
　　
<img src="media/14518870323173/14518973569665.jpg" alt=""/></p>

<p>剩下的工作就是你自己配置你的客户端，当客户端连接时，就在上面的图里就能看到了（图片的最后三行）</p>

<h2 id="toc_15">Strongswan 配置</h2>

<p>　　接下来的这部分我就不多说了，非常麻烦，所以我只贴我的配置咯，入门级的教程你可能需要问别人啦~
　　
　　这是一个麻烦，因为涉及太多了，而且每个人配置还不一样，比如我始终只使用证书认证，最后被迫开放了密码认证。所以这里可能不见得每个人都一样，你一定不要惊讶。主要涉及到了的配置文件就是 strongswan.conf, ipsec.conf,ipsec.secrets 。
　　首先编辑 strongswan.conf 加入 <code>i_dont_care_about_security_and_use_aggressive_mode_psk = yes</code>和 
    <code>duplicheck.enable = no</code> 这两项一个是让你可以使用 ipsec + 密码来上网，一个是为了允许同一个用户名（或者证书）在多个终端登录。</p>

<p>算了，想了想，还是不写配置了，好累。   </p>

<p><mark>改天补齊</mark>         </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 My Chrome 订制自己的浏览器]]></title>
    <link href="bao3.org/14701463847399.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463847399.html</id>
    <content type="html"><![CDATA[
<p>事情的起因，是因为一个友人常在紧要关头需要下载东西，不得不借助一些手段，但是平时里并没有好好帮她调教她的 PC，因此一时之间并没有最快捷的方法让她能傻瓜式使用翻墙墙手段下载。于是花了 1 个小时来研究打造一个客制化的浏览器，随用随开且关闭后就清除一切痕迹。这个 MyChrome就是这今天的主角</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="bao3.org/14701463847475.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463847475.html</id>
    <content type="html"><![CDATA[
<h1 id="toc_0">优雅女性一生一定要看的50篇黄文</h1>

<p>这只是一个测试，测试复制 HTML to MD格式 。</p>

<p>2015-10-21 21:14 无节操火哥
阅读 118万+</p>

<p>1、《媚者无疆》
故事好，文笔一流，虐恋情深。很难得。
上来女主就被轮奸了。作者下手之重。
然后女主进了古代的暗杀组织，被训练如何在出卖肉体的过程中neng死对方。女主是个中翘楚，还假扮男人去搞基佬，趁对方高潮，给他来一刀。
训练和晋级的过程是一大看点，各种花式流氓训练，大开眼界。
印象深刻的是男主中了奇毒，靠近女主就会毒性更强，万箭穿心。即使如此，男主还是跟女主在秋千上乱搞，那画面，淫荡又感人。</p>

<p>2、《平凡女人的春天》
经典的霸道总裁爱“上”我。女主是个坐过牢的妓女，又矮又胖。
却有两个大帅比为了她要死要活。
一个黑道霸道帅总裁，一个纯情傲娇小少爷。
没错，就是肉版的《流星花园》。
通篇都是“她身体软绵绵，全身都是肉”这样的描述，看着看着我竟然……饿了！
小说夹议夹叙，有荤有素，不会太腻。
关键是励志啊。女主长得平凡，唯有活好。在这个看脸的世界，有一门技艺傍身，总是好的。</p>

<p>3、《少妇白洁》
作为经典巨著，地位堪比黄文界的《追忆似水流年》。
白洁是一名温婉的中学女教师，自从被校长高义下迷药强奸之后，从此睡遍教育界、富豪界、权贵界。
最关键的是，白洁不管睡了多少人，还是保留了初心——那种温婉的气质和害羞的本能。
作者写得相当走心，描写相当有镜头感，细节上有很多设计。比如白洁和校长车震，与此同时，白洁老公在火车站找白洁，一步步向车这边靠近。
紧张感一步步渲染，白洁和校长乱搞正酣，白洁老公到了车旁边，还往里面看……
唯一的瑕疵是作者绝壁是直男，简直有审美癌，白洁的穿着相当惊悚，经常是粉色衬衫配粉色牛仔裤……粉色牛仔裤到底是什么鬼？</p>

<p>4、《穿越后的悲惨生活》
开场女主才十几岁，就杀了个人。
够劲爆。
然后是倒叙。女主被继父强奸，悲愤中杀了继父再自杀，结果就穿越了。
穿越之后，在大户人家，每晚和一个床上功夫很正点的男子搞来搞去，最后才知道，那男子是她的公公。
再然后就和很多人搞来搞去了。跟白洁一样，不管搞多少次，依然纯情。依然羞涩。
作者写床戏的时候，耐心足够，比如女主涨奶，大夫给她按摩那一段，完全符合小说写作技巧，“急事要慢写”，读者越想看到进展，越要娓娓道来。</p>

<p>5、《女文工团员的最后下落》
讲1950年几个高挑漂亮的女文工团员被土匪掳走，并且被花样性虐待的故事。
很黑暗很重口，SM爱好者的福音。
像我一样单纯天真无邪的人，只看了三遍。
那些看完了还不满足的同学们，还可以接着看《朱颜血》、《活着就是恶心》、《我这四年的性奴生活》。
哎，我为什么知道那么多。</p>

<p>6、《少年阿宾》
经典名著，和《少妇白洁》齐名，早年的台湾小黄书。
网上有同学说到现在还不时要把这本书拿出来撸一下，可见其历史地位。
少年阿宾是个大学生，但有个更重要的身份——千人斩。
隔壁三十多岁的少妇，图书管理员、女朋友闺蜜、路人、女店长……只要一遇到阿宾，都马上变得软绵绵。
男男女女互相乱搞，作战场地花样繁多，肉戏一波接一波，简直就是动物世界大联欢。
神奇的是，虽然是通篇都是肉，竟然不觉得猥琐，还有点小文艺是怎么回事。</p>

<p>7、《唐朝绝代佳乞歪传》
名字是什么鬼！
直接改成《肉版盗墓笔记》多通俗易懂，多信达雅呀！
盗笔粉请别打我！
女主白天乞讨晚上盗墓，每天晩上都和各种鬼各种妖各种人各种人妖完成“生命的大和谐”。
文章肉多量大不废话，人鬼，人妖，墓地野战SM，男男，3P应有尽有。
只是是女主作战的地方极为艰苦，不是棺材版就是乱坟岗，但人家依然想干就干要干得爽快，简直吃苦耐操（不，吃苦耐劳）不觉令人肃然起敬。</p>

<p>8、《长生狱》
少见的女攻男受SM同居文。
作者笔触不急不躁，变态中透着温馨，淫乱中带有温暖。
不仅SM出了惺惺相惜，还SM出了梅兰竹菊，最后SM出了虐恋情深和不离不弃（男主为女主倾尽家财锒铛入狱，女主对男主不离不弃）。
在肉文中简直就是美文欣赏的级别，想要皮鞭蜡烛狼牙棒亲手调教美少年版王思聪的千万不要错过。</p>

<p>9、《小家碧玉》
又叫《公主夜未眠》。
文笔很赞，有种看明清话本的感觉。写的是古代一个小家碧玉似的女子，她叫林碧玉，长得是清纯可人，实际上风骚淫荡，萝莉时期目睹爹妈乱搞之后，就开启了豪放模式。
它最好看也最没底线的部分，是父女乱伦。跟那种不走心的父女乱伦不同（实在鄙视那种器官+下流话+感叹词的弱智黄文，太敷衍了），乱伦的设计感很足，好几次都是父亲错把别人当女儿搞了，关键之时发现，箭在弦上，不得不发……</p>

<p>10、《深宅旧梦》
开场口味就极重，女主被小叔子搞，这不是重点，重点是当着她的刚出生不久的儿子搞。然后就是整个府上男女老幼轮流或者集体搞她。还穿插长辈的淫乱往事。
奇特的是，这么无耻的剧情，文笔竟然还颇有些古色古香的味道。这能叫反差萌么？</p>

<p>11、《探亲》
有一种黄文系列就是凌辱女友主题的。就是男主的一大兴趣就是强迫女友穿得特别暴露到处勾引男人，然后他在旁边偷窥女友跟别人乱搞。
《探亲》的男主目睹了女友在车里给舅舅口，女友在火车上一个死胖子搞，然后把女友带回老家，女友跟他家的仇人极其傻儿子搞。高潮是女友一直心心念念想和男主老爸乱搞，但各种障碍，未遂。这场戏铺垫之长，到最后看到两个人终于得偿所愿地睡了，竟然有种大团圆的感觉是怎么回事。</p>

<p>12、《异唐新月》
父女禁断恋的经典之作。
女主穿越到古代，父亲是腹黑大帅比，对女主各种宠溺——主要是在床上。还有男女主各种在野外云雨，男主假扮恶人强暴女主等。肉版甜宠文。
同类父女乱伦肉文还有《逍遥》（口味更重，花样更多，男主本着实验精神往女主身体里放了各种东西乃至万事万物）、《囚妃传》、《桃源仙踪》、《你是我的心跳》、《宝贝真乖》等。</p>

<p>13、《门房秦大爷》
衡量一篇黄文红不红，就是看它有没有被山寨。
《门房秦大爷》绝对是同类题材经典之作，《大学门卫老董》就完全是抄袭它的故事创意。
《门房秦大爷》写的就是在大学女生宿舍当门房的秦大爷本来都已经无法勃起了，在看了大学生在宿舍里3P之后，重新燃起了对生活的热情，扬起了生命的风帆——突发性器大活好啊，女大学生趁他睡着了就把他上了，还贴心地介绍了比自己更美的校花跟秦大爷搞。女主还和秦大爷以及肌肉发达的锅炉工3P。
作者写得相当有诚意，肉戏之间各种侧重，无重复之感。</p>

<p>14、《红楼遗秘》
文风基本保留了《红楼梦》的古雅之感。无非就是把原著里打招呼的戏码全改成床戏了。各种排列组合都上了个遍。
红楼主题的黄文本来就多，以前还看过好多，但是名字都忘了，原谅我智商低。
同题材只记得《诱红楼》，相比之下，文笔更现代，更简单粗暴。
啊，还有篇很经典的《红楼绮梦》，推荐！</p>

<p>15、《女儿的奶水》
这名字是什么鬼啊。简直不想承认是我喜欢看的。
父女乱伦，口味极重。刚生了小孩的女儿回娘家，色诱老爸，一步步睡了老爸的故事。
它最特别的一点就是，作者真他妈有耐心啊啊啊。
暧昧、色诱、摩擦、摸来摸去、啃来啃去好多章，男女主还没真的搞。急死你丫的。
但我真的就喜欢这种，不急不躁的。最烦那种上来就“快来操我啊！插我啊……啊。。啊。啊。啊”的，肤浅！恶俗！</p>

<p>16、《师傅的傻丫头》
依然是父女乱伦，不同之处是比一般的父女乱伦更变态。是养父和幼女乱搞，性奴养成计划那种。女主几岁起就被男主各种摸各种教坏。
反差在于文笔清淡，有种古人写的黄文即视感。
变态又文艺的感觉，你得看了才能懂。</p>

<p>17、《公车上的奶水》
不得不批评一下黄文作者了，妈蛋取个高雅点的名字会死啊。
这种羞耻度100%的名字，让我怎么拿得出手！嗯！
故事很粗暴，就是刚生了小孩的女主在公车上被包括司机在内的所有男乘客强暴。算是早期黄文经典。</p>

<p>18、《少女的心》
推荐它的原因纯粹因为怀旧。
我们必须要有点情怀嘛。
作为上世纪七十年代性启蒙巨著，看它的时候我还小，两年前，我才十几岁。看到女主那段还好，直到女主的两个女儿在床上各种激情，被继父看见了，非常友善地邀请她们一起来玩耍……这个时候就惊叹哇靠，上世纪七十年代的脑洞也很猛啊。</p>

<p>19、《贞芸劫》
它有个更长的名字，叫《水浒揭秘：高衙内与林娘子不为人知的故事》。
这种从经典名著衍伸的黄文我最喜欢。连机器猫和HELLO KITTY的黄文我都搜来看过。
文笔不错，高衙内诱奸林冲老婆那几场戏，写得极好，各种辗转跌宕，高衙内个中高手，林娘子欲拒还迎。</p>

<p>20、《名媛的屈辱》
又叫《为夫还债的妻子》。故事并不奇特，女主是名门少妇，夫家的仇人绑了她的老公，强迫女主在众目睽睽之下和公公合体。
无非是公媳乱伦的故事，特别在于，首先公媳是被迫，其次，是一步步走到三垒的，把媳妇的胸上系了绳子，让公公最嘴去打开；再给公公的器官上绑了绳子，让媳妇用嘴去打开……
从互亲、互摸、到69、到女上男下，步步为营，独具匠心。算是黄文中精心设计过的，业界良心好吗。</p>

<p>21、《女主播的沉沦之路》
女主播作死，答应电视台的工人送她回家，于是被强奸，于是上瘾。工人堪称励志典范，一个个睡遍电视台所有美貌女主播，在电梯里搞，仓库搞，等等。
这种题材的好看之处大概就在女主播在屏幕上的端庄和床上的淫荡之反差萌吧。
所以男主最喜欢的就是打开电视，看着电视里的女主播，做起来更带劲儿。</p>

<p>22、《逃脱》
28岁的处女老师去学生家上课，没想到被16岁的鲜肉学生们强上。
为什么是“们”，因为学生是双胞胎，有个怪癖，总喜欢一起上同一个女人。
女主后来在学校遇到另一个喜欢她的男同学，XXOO完才发现，他跟那双胞胎是兄弟。
于是……四个人就过上了性福的生活。</p>

<p>23、《村女也疯狂》
从小在国外长大的豪放女，穿越到农村一个13岁女孩身上。
豪放女一看，嘿，自己长得蛮鲜嫩可口嘛，马上就来了劲儿。
首先就把自己爹爹给勾引了，吃干抹净。
然后去到学校里，一脸无辜清纯地就把鲜肉男同学、斯文男老师、俊俏帅姐夫通通都给上了。
偏偏他们被上了还觉得万分愧疚，啊，我怎么可以这样对一个天真无邪的小姑娘呢……
文章写得不猴急，不粗暴，勾引戏娓娓道来，撩拨得人心痒痒的呢！</p>

<p>24、《秦青的幸福生活》
爸爸出差了，后妈留守在家。
正所谓肥水不流外人田，既然爸爸不在，秦青只好义不容辞地子承父业，每日都努力“耕耘”……后妈。
哎，毕竟关爱空巢老人，是秦青义不容辞的职责嘛。
于是，接下来秦青还关爱了小姨，隔壁邻居少妇、漂亮班主任……
不得不说，秦青的关爱行动真是既有深度，又有广度啊。
总而言之，这是一部感人肺腑、令人动容的史诗级乱伦巨著。</p>

<p>25、《梦中的女孩》
一个超级IT宅男，每天都梦见一个女孩。
有一天在超市，他竟然见到了这个女孩。
可是梦中女孩一见到他，就如同惊弓之鸟，男主弱弱地准备搭讪……到这里为止，都还是韩剧的设定。
然后，女孩就开始默默解开衣服上的扣子，几乎哭出来说，求你，不要在这里，这里有人……然后……然后你们自己去看啊。</p>

<p>26、《人兽乱》
故事梗概是这样的你们感受一下：受是村里的人，每天都会和黑豹攻相会，有一天攻到了发情期，受便提出为攻解决。
后来攻带受回到家族中，攻的父亲强占了受并娶受为妻，结局3p（天地良心我己经尽量写的信达雅文雅颂了广电总局不要抓我啊啊啊)。
它几乎每一章每一段每一句每一个标点符号都让人打开新世界大门。非常重口，清纯的同学给我躲远点儿！</p>

<p>27、《芍药》
超肉的姐弟禁断文，除了必要的对话外几乎百分之九十都是肉。
最大的卖点就是背着家人偷情的刺激感。
文中提供大量偷情场所，以供参考——浴室，大衣柜，小树林，草地以及放学后的教室。
中间不知为乱入了一段师生3P，害我还以为男女主要加入一起愉快的玩耍呢。结尾弟弟要和姐姐生孩子，甚至不惜去结扎，真是感天啊动地。
果然有个器大活好的弟弟比震动棒方便得多，得多，得多。
上面这些没羞没臊没下限的话不是我打的。
是键盘不要脸，乱说些什么啊。</p>

<p>28、《缺一不可》
女主是大名鼎鼎的AV女优，起了个很流星花园的名字叫上官秋怡。
作者称其知名度远超本拉登和布什，也对哦，布什是美国的，苍老师是世界的。
用作者的话说女主在演艺圈和诸多大腕都有一腿，连经济人和化妆师也不放过。可谓是炮友遍天下，这样大概就是书名“缺一不可”的由来吧。
不过坦白说我觉得女主好像一个勤劳的母鸡每天在喂养自己嗷嗷待哺的小鸡呀，妈的看着看着我竟然看出了母仪天下的光辉情操来！
我的三观啊，你快回来！</p>

<p>29、《阿里布达年代记》
魔法世界背景，男主角虽然武功低微，但是为人狡诈阴险卑鄙风流，一路靠迷奸，收服无数老婆，简直就是魔法界的韦小宝。
对了他最喜欢研究淫术魔法，召唤出来的淫兽不仅可以和女人上床，还能打架！
作者脑洞大，剧情起伏多，值得一看。</p>

<p>30、《爱神之传奇》
男主加入了以满足女人为宗旨的门派，掌握的技能是可以看透女人的心思。
有了这个绝世神功，他就可以给所有女人最好的性爱体验，让她们体会高潮，感受被细心呵护的感觉，堪称最良心的性爱服务。
是不是很感人？</p>

<p>31、《沧澜曲》
大概是黄文里最好的武侠小说之一了。
虽然男主跟很多女人都有交合行为，但是随着他武功的逐渐加强，他的花样也越来越多，方式也越来越高级。
不是为黄而黄，而且剧情也耐看，难得的是作者文笔不错，语言古风味足。
肉体描写清新不猥琐，推荐给喜爱武侠的女生。</p>

<p>32、《盛开》
作者长着翅膀的大灰狼非常有名啊。黄文大神。
男主就是一个忠犬霸道攻，女主也傲娇高冷。
全篇剧情无非就是我爱你你不爱我，我也爱你但是我不说，我爱你你也爱我但是我们还是不能在一起的相爱相杀。但是作者文笔真的不错，这么烂俗的桥段也能写的引人入胜，勾引的读者替他们干着急。
BY THE WAY，我最喜欢这一卦的男主角了，表达喜欢的方式就是上女主，表达愤怒的方式是上女主，表达难过的方式也是上女主，表达绝望的方式还是上女主，这感情多么的纯粹啊。和我一样小清新的女性们，快滚去看！</p>

<p>33、《严优》
很纯粹，很纯粹的黄文，基本没有什么剧情可言。
女主从头肉到尾，凭借一身床功让书中所有男人都臣服于她，等同于男性AV。
聊以 自慰。嗯。</p>

<p>34、《我的性启蒙老师》
名副其实——性启蒙老师，主题就是一位美丽妖娆的熟女老师帮小男生破处，一步一步带他走进性的殿堂……
如果我们是老师，台下坐着一帮花美男学生，李钟硕宋仲基俞承浩林时完……妈呀，先给谁启蒙比较好？还是一起来，显得不那么偏心呢？
好挣扎啊。</p>

<p>35、《海盗的悠闲生活》
男主是一名露阴癖，喜欢裸体在一堆女人面前走来走去，更喜欢女人裸体在他面前走来走去。
作为一名海盗，他打仗之余，不忘挤出时间来OOXX。他，拥有一整条船的女人供其淫乐。没错，这就是一篇后宫黄文。
让人诧异的是，这篇从直男癌角度出发的黄文，居然有部分章节在宣扬女权，倡导男女性爱平等，略感人。
里面还融入了日本战国时代丰臣家与德川家的斗争史，是不是很走心？</p>

<p>36、《混蛋神风流史》
作者应该是个游戏狂，所以这篇文章的背景跟某些网游如出一辙，基本上，就是把网游写成黄文。
毫无疑问地，男主也是一个大型直男癌，黄文里出现的只要有名字的女性，都莫名其妙地爱上了男主，真是“没有有一点点防备，没有一丝丝顾虑”。是的，男主又名“叶良辰”。
作为一篇黄文，它肉体描写很多，交合行为很多，还输出了一点心灵鸡汤，推荐给喜欢打游戏的优雅女性观看。
篇幅略长，可跳读。</p>

<p>37、《东北风情熟女之惑》
男主爱上了家政阿姨，并且是孩子已经上学的家政阿姨，在他眼中，20来岁的姑娘太嫩，身材太平，而且不会持家，男主每天拿着父母的钱独自生活，还豢养着自己45度角的忧伤。直到一名家政阿姨的出现，把男主从这份忧伤中捞起。
故事情节平淡，胜在励志。哪怕我们七老八十，还是不能放弃人生，要坚持睡小鲜肉的呀！</p>

<p>38、《淫术炼金士》
一篇带着玄幻色彩的黄文。
男主拥有一身法力，用法力杀敌只是他的业余爱好，他的主业是用法力迫使美女屈服在他的淫威之下，正所谓，超能力就应该用在刀刃上。
亮点在于，相比起同类后宫向黄文，作者真的有认真在思考情节，台词也经得起推敲，可谓良心黄文了，可收藏。</p>

<p>39、《十锦缎》
十锦缎这名字听着很高深，其实就是十张锦缎，收集齐了就能一统江湖。
武侠色情小说中的经典名著，主角是师兄弟二人，一边闯荡江湖，一边收获各种妹子。
明明是一部黄文，却走心得让我一度以为看的是古装言情文。
但千万不要被作者文雅清新的文笔所迷惑，其中男女、女女、人兽，口味真是啧啧啧……太恶心了！还有吗？</p>

<p>40、《美少妇的哀羞》
十几万字的巨著就讲了一件事：一个美少妇当着丈夫的面被一群人奸虐，甚至包括自己的公公、大伯、小叔、侄子……简直是全家总动员。
捆绑、跳蛋、春药……变态花样之多，描写之详细，简直就是岛国A片的文字典藏版。</p>

<p>41、《舌战法庭》
故事另辟蹊径，讲的是法庭上关于一场强奸案的辩护。
期间不仅要详细还原强奸现场，还要在法庭上比较阳具大小、精液味道、睾丸形状，把一切的下流都搞得那么专业。
于是，当你看这篇黄文的时候，可以自豪地说，我在看法律书籍，懂不懂！</p>

<p>42、《九王一后》
9个高大帅气、性欲旺盛的吸血妖王子遇见一个普通的处女，能发生什么？
其实也没什么，不过是发明各种姿势，进行简单的10P！10P！10P！
请自行捕捉关键词。
关键是，10个人还相亲相爱，简直用生命诠释和谐社会啊。</p>

<p>43、《遥想当年春衫薄》
名字真雅致啊。
一边是投怀送抱的小堂妹，一边是主动约炮的已婚前女友。
一边是乱伦，一边是不伦。
两边都偷情，两边都刺激。
文章虽不长，有效信息却不少，嘿嘿，你懂的。</p>

<p>44、《身有千千劫》
处子变淫娃的故事。
丫鬟月娘惨遭府中的两个下人奸虐，幸而被大公子所救，但没想到，大公子接过接力棒，继续奸虐。 
当月娘委身大公子之后，又遇到二公子，二公子顺利接棒，继续奸虐……
女主太惨了，需要善良的我们帮她分担一下吗。</p>

<p>45、《小鸟》
小鸟——我还以为这篇黄文另辟蹊径，写男主很小呢。
器大活好的男主不爱娇妻，偏爱娇妻小妹。看黄文还要纠结三观的同学，就要赶紧绕道了。
出卖娇妻与朋友玩5p，还不忘与娇妻小妹一起抵达高潮。
全篇肉，小妹够骚气。</p>

<p>46、《往事追忆录》
以回忆录的方式写意淫的故事。
文笔好，每章节题目都文艺到爆表。
满足各类偷窥狂的YY。
值得批判的是肉略少，简直不尊重读者啊。</p>

<p>47、《四海龙女》
艳情武侠小说。
既满足武侠梦，又满足意淫心。
关键是它被录入了扫黄打非四十大禁书之一，是不是很牛逼的赶脚？</p>

<p>48、《女奴》
在一个架空的男权之国——夜国，发生的三兄弟与妹妹乱伦的故事
优雅的腐女们看小黄文之余还可以把它当bl看，毕竟三兄弟基情满满！</p>

<p>49、《上错电梯进错门》
典型玛丽苏小说。男主直男癌，霸道总裁，自以为很帅。唯一的不同就是，肉，肉，肉，全篇肉！在这里你可以知道什么叫力道持久，一夜七次郎。
建议受不了麻雀变凤凰又嫁入豪门傻白甜的，直接跳过剧情看肉！</p>

<p>50、《魔都》
女主加班到很晚才回家，路遇一猥琐男子，抓了她到另一个世界，说，这是魔都。抓你来，为了繁殖。
奇幻类的黄文，剧情各种脑洞。
肉多量足，但是肥而不腻。既不会让你觉得清淡，也不会让你觉得妈呀全是搞来搞去好空虚。
一篇黄文，还有悬念、魔幻、真爱……良心之作。</p>

<p>打赏的人</p>

<p>精彩推荐
中国官方称网贷平台“e租宝”是76亿美元庞氏骗局
华尔街日报中文网阅读数 16301</p>

<p>美国食品公司福喜集团挑战中国法院判决
华尔街日报中文网阅读数 13555</p>

<p>【韩剧汇总 2.02】
影视菌阅读数 30823</p>

<p>台网友评：从大陆返台 好像回到原始社会
中国台湾网阅读数 12263</p>

<p>高中时被同床男孩猛干
没出轨的奶爸阅读数 29461</p>

<p>早啊！新闻来了〔2016.02.02〕
央视新闻阅读数 26566</p>

<p>2016年2月2日
李冰清LilyLee阅读数 80660</p>

<p>整个场面我hold住！看明星示范夜趴最吸睛发型
发型顾问张林阅读数 11006</p>

<p>查看更多
热门评论</p>

<p>16番茄炒蛋要放糖
2月1日 14:04
我曾经看过一篇H文，写到肉，正在激动人心的时刻作者来了一句：因尊重女性隐私以下内容不再描述…我…方成了立方体[拜拜]</p>

<p>65多串家的蛋黄酱
2月1日 13:32
表示只看bl黄文……bg不约我不约[doge]</p>

<p>24-当&ndash;归-
2月1日 13:53
啊诗哥你被高岭之花慕寒看到了要怎么办[doge][doge][doge]</p>

<p>880r1and0
2月1日 13:18
你是我认识的微博清流小诗哥吗[哆啦A梦吃惊]</p>

<p>大奶菌
今天 14:56
@机智的莽子 推荐你哦，不用谢</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 上使用自动发布到 github pages]]></title>
    <link href="bao3.org/14701463847714.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463847714.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>理论上你有什么需要实时提交的 git repo 都可以使用这个方法，但为了节约，你需要设置 fswatch 的间隔时间
虽然我下面使用进行的时候使用的是 MyWeb ，其实你也可以换成其他的 Markdown 工具，效果应该差不多，只是 MyWeb 实在是方便。</p>
</blockquote>

<p>　　敝人乃懒人一枚，很久前购买了 <mark>myweb</mark> ，用来记点纯文本的笔记，偶尔发个 blog 到 <strong>github pages (github.io)</strong>。但是 myweb 是个 GUI 工具，发布到 github要换到 iTerm里自己输入命令 git add  &amp;&amp; git commit ，非常的麻烦，所以就又一次偷懒写了一个烂脚本，原则上适合用于所有的 app 自动发布到 GitHub。</p>

<h2 id="toc_0">首先， 确认你要发布的目录</h2>

<p>　　我的 mweb 发布到 Github 的文件夹是 blog，如下图所示：
<img src="media/14550024568971/14550028748116.jpg" alt="" style="width:314px;"/></p>

<p>　　先在 blog 这个目录上右击生成网站，然后再点如下图所示，找到生成网站的位置：
　　<img src="media/14550024568971/14613161793220.jpg" alt="w:100" style="width:297px;"/></p>

<p>　
　　然后生成的网站目录在 <code>/Users/bao3/Library/Containers/com.coderforart.MWeb/Data/Documents/MWeb/LocalData/Site/blog/</code>，所以我的目标就是每次文件有变化时，就自动将文章发布到 github ，记住，重点是 “有变化时” 实时更新。</p>

<h2 id="toc_1">其次,安装自动发布工具</h2>

<p>　　我们需要用到 <mark><strong>fswatch</strong></mark> 这个命令，这需要使用<code>brew install fswatch</code></p>

<p>　　可选的一个 Shell 命令是 <code>Proxychains4-ng</code>，这个东西的主要用途是为 git 命令添加代理，以防止网络质量不佳。要使用这个命令就需要有一个 Socks 代理，如果你没有，就不要安装了，而我自己有一个<code>shadowsocks-libev</code> ，所以非常方便。</p>

<h2 id="toc_2">脚本主体</h2>

<p>　　我不是个程序员，所以写出来的脚本有点“脏”，好在还能用，自己动手丰衣足食嘛；然后开始写我们的脚本吧：
找一个目录存放这个脚本，比如自己的 &ldquo;/Users/`whoami`/ &quot;下面，文件名字叫 gitblog.command ，重点是一定要是 *.command 这种结尾，后面有重要用途。</p>

<pre><code>
#!/bin/bash
#$wdir is where your github blog dir
wdir=/Users/bao3/Library/Containers/com.coderforart.MWeb/Data/Documents/MWeb/LocalData/Site/blog/
export cmd=/usr/bin/git

#locate the &#39;fswatch&#39; command ,you should install it via &quot;brew install fswatch&quot;
export fsdog=`which fswatch`
export proxy=`which proxychains4`
args=&quot;-0 -a $wdir/atom.xml&quot;
function gitpush() {
    $cmd add . ;
    reslut=$($cmd commit -a -m &quot;`date`&quot; | grep nothing)

    #when get $result length == zero ,means that there is new modified blog ,just git push  in next!
    if [ -z `$reslut` ] ; then

        #Note : proxychains4 is a proxy tools which would let &quot;git &quot; use your proxy ( shadowsocks e.g.),just brew install it OR it would skip auto.
        `$proxy -q  $cmd push -q` || `$cmd push -q`
    fi;
    return 0;
    }
cd $wdir;
#gitpush ;
export -f gitpush;
$fsdog $args | xargs -0 -n1 bash -c &#39;gitpush&#39; &amp;

exit

</code></pre>

<h3 id="toc_3">这段脚本实现的功能如下：</h3>

<ol>
<li>使用 <code>fswatch</code> <em>实时</em> 检测 myweb 的 blog 目录</li>
<li>一旦发现有新的博客文章，则会自动提交，并添加当时的时间为标记</li>
<li>提交时会优先使用 <code>Proxychains4</code> 通过代理提交，如果没安装则自动使用 Git push 提交</li>
<li>只有变化的文章才会提交，所以非常省流量</li>
<li>每次你写完博客，只需要在 Myweb 里点 下面的菜单 <br>
<img src="media/14550024568971/14550119677927.jpg" alt=""/></li>
</ol>

<h2 id="toc_4">开机启动</h2>

<p>在做这一步前，请先双击刚刚生成的 gitblog.command ，应该可以启动一个黑窗口然后又消失了。
接着，你打开 Terminal 输入下面的命令</p>

<p>$ ps waux | grep git | grep -v grep
bao3            20410      4:43下午   0:00.01 xargs -0 -n1 bash -c gitpush</p>

<p>这表示成功启动了。但如果没有，则表示你没有配置成功，多半是里面有什么特殊符号少了半边或者路径错了什么的，需要你自己调试了。</p>

<p>接下来就是在“系统偏好设置”里的“用户和群组”，加上 gitblog.command 的开机登录选项。</p>

<p><img src="media/14550024568971/14613159401465.jpg" alt=""/></p>

<p>至此，已经全部完成，每次对你的 blog 有任何更改，全都会自动更新到 github 上，非常方便。</p>

<p><mark>请你一定注意，在 MyWeb 里设置备份哟</mark></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kodi(XBMC)视频播放软件]]></title>
    <link href="bao3.org/14701463847780.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463847780.html</id>
    <content type="html"><![CDATA[
<p>Kodi 是视频播放软件, 很好支持流媒体播放, 据说是看电影,美剧,在线播放的神器. Kodi可以用于播放本地的视频/音乐文件, 也可以通过插件实现在线观看或音乐收听, 甚至支持字幕哦! 主要强大的功能主要通过插件实现, 支持图片, 视频 (TV流, 电影, 电视剧), 音乐 程序, 字幕等插件. 最最关键的肯定是视频插件了. 插件这里叫Add-ons, 相关收录插件主要放在库Repository中, 而Repository可以通过zip文件加载, 也可以通过网上的源source来自动下载和更新. 当然选择Source网上加载比zip文件靠谱啦.
设置中文界面：
主界面—&gt;点击Settings-&gt;点击 Appearance-&gt; 左侧的 SKIN，然后选右边的 FONTS为 Arial based，注意本步骤应先操作，否则下一步选中文后就会变成不能识别的乱码!!!
点击左侧的International -&gt; 然后选右边的 Language 为 Chinese (Simple) 、 Character set为 Chinese Simplified（GBK)
添加源和库
添加网上的源: 主界面-&gt; System -&gt; File Manager -&gt; 左下的Add Source -&gt; None双击, 开始输入相应网址, 并添加一个名字用于识别该源(随意起). 完成后可以双击点进去看看是不是像文件夹一样里面含有文件夹或者zip文件一类.
添加库: 主界面 -&gt; System -&gt; Add-ons -&gt; Install from zip file (没有见到就后退(mac的delete或者Win的&lt;-退回键), 推到见到这个) -&gt; 选择源 (本地放zip源的文件夹或者网上源的源名) -&gt; 找到相应的zip文件.
可以参考Genesis的库图文安装教程2. 更多库和源的安装(不停update)的可参考一个好博客3.
会设置源和加载库后, 就可以安装各种插件实现Kodi的强大功能了~~~
TVMC
Kodi一个预安装插件版, 非纯净版. 下载: <a href="http://www.tvaddons.ag/">http://www.tvaddons.ag/</a>. 主要借用了fusion installer来方便安装插件. 可以在一般的Kodi中手动安装(源<a href="http://fusion.tvaddons.ag,%E5%8F%AF%E5%90%8D%E4%B8%BAfusion">http://fusion.tvaddons.ag,可名为fusion</a>), 用远程zip文件安装, 在start-here中可以找到Config Wizard, Addon Installer and Fresh Start三个插件,第一个是TVMC运行主要自动注册插件, 第二个是自行安装插件, 第三个是恢复Kodi. 理论上用第一个Config Wizard安装就可以完成Kodi-&gt;TVMC的过程, 但是在Mac上安装报错.Window版精测也挂了(14.2版的TVMC). 基本上TVMC难以安装使用. 还是要靠手动安装.
常用源及插件
安装插件可以在在视频里选插件, more… 去添加. 也可以在System-&gt; Add-ons里面, 选择用库安装, 选择相应库再找. 一个安装很多插件的方法的视频(可能会过时)
TVAddons fusion</p>

<p>源<a href="http://fusion.tvaddons.ag">http://fusion.tvaddons.ag</a>: TVAddons的主要源(也就是TVMC的主要源), 主要库zip在 xbmc-repos 内. 常见安装上面提及的Addon Installer. 貌似不太好使.
SuperRepo</p>

<p>源<a href="http://srp.nu">http://srp.nu</a>, 可命名SuperRepo -&gt; 新加插件, 选zip方式再选源super-&gt;选helix-&gt;all-&gt;选repository.superrepo.helix.all-latest.zip. 这样, 号称最大的库源就加载了, 啥都有, 中文的库都有…建议最好再安装这个库…因为东西太多太杂了,貌似先安装的会影响后面的库出现插件?
建议安装1Channel, Genesis, Icefilms, Phoenix, Navi-X, Cartoon HD 和Cartoon HD extra等
MetalKettle</p>

<p>源<a href="http://kodi.metalkettle.co">http://kodi.metalkettle.co</a>. 内含著名的 Genesis 插件, 该插件有极其丰富的电影资源! 该插件按理也可以在Addon Installer中安装.
也可以手动安装, 图文安装参考2. 简而言之, 就是文件管理-&gt; 添加源-&gt;输入<a href="http://kodi.metalkettle.co,%E8%B5%B7%E5%90%8D%E4%BE%8B%E5%A6%82MK">http://kodi.metalkettle.co,起名例如MK</a> Repo,随后在添加插件-&gt;Install from zip file-&gt;选MK Repo后-&gt;选1…Recommended Repositories-&gt;选repository.lambda-x.x.x.zip-&gt;然后Install from repository中选刚才加的lambda-&gt; 选Video Add-ons-&gt;Genesis完成添加.
iwillfolo/iwf (SportDevil)</p>

<p>源<a href="http://iwillfolo.com/iwf/">http://iwillfolo.com/iwf/</a>, 一个看体育直播不错的源, 找到同名的库安装即可. 内有著名的 SportDevil 插件, 视频教程参看. 还有使用本地zip安装的例子4. 除此以外还有Genesis, Navi-X等.
Xunitytalk</p>

<p>源<a href="http://xunitytalk.com/xfinity/">http://xunitytalk.com/xfinity/</a>, 可以添加其iSteam和XunityTalk. XunityTalk有如Cartoon HD 和Cartoon HD extra, Pak Hind, Pak India Live, Film on, Robinhood-people list, Vdubt25, World TV XunityTalk等.
noobsandnerds</p>

<p>源<a href="http://noobsandnerds.com/portal%E5%8E%9F%E5%90%8D%E4%B8%BAtotalxbmc">http://noobsandnerds.com/portal原名为totalxbmc</a> (原源 <a href="http://i.totalxbmc.tv/">http://i.totalxbmc.tv/</a>).
本地视频资源
这个本来貌似没啥特别的, 在图片/视频/音乐中进去后第一个菜单选照片/文件/Music, 或者对应本地位置(可选最后一个 添加照片/视频/音乐 -&gt; 浏览 来添加本地目录) 来加载自己的媒体文件. 选择后就能添加本地源进行播放了, 很方便. 在选择视频添加本地源时, 会进入内容设置界面, 这里可以设置刮削器(从网上自动抓信息, 可以参考刮削器5 ). 自己尝试吧~
国内相关论坛: 原动力社区, 高清范论坛
Kodi Wiki ↩
Tutorial How to Install Genesis Kodi XBMC ↩ ↩2
Seo-Michael博客 ↩
SportDevil Install ↩
利用刮削器加载媒体库 ↩</p>

<p>◆本文地址: <a href="http://platinhom.github.io2015/12/04/Kodi(XBMC)%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E8%BD%AF%E4%BB%B6">http://platinhom.github.io2015/12/04/Kodi(XBMC)视频播放软件</a>, 转载请注明◆
前一篇:　Sublime:Anaconda
后一篇:　Python:文件编码问题</p>

<p>Contact: Hom / 2015-12-04 17:50:39 已阅读(436)
类别: IT  标签: Software </p>

<p>本站总访问量23034次, 访客数4756人.    |   Give your Comments: 留言   |   Last updated: 2016-02-09 03:47:22 CST
Powered by Jekyll | License: (CC) BY-NC-SA   |   Copyright 2008 - 2016 by Hom &ndash; Contact me in Weibo
GoTop</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主题：如何处理wget mirror网站后应用程序文件名问题]]></title>
    <link href="bao3.org/14701463847961.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463847961.html</id>
    <content type="html"><![CDATA[
<pre><code>  By NetGuard Security Team --Chen Jun (chenjun@netguard.com.cn)
</code></pre>

<p>日期：2001.08.02
    众所周知，在windows下的作mirror的程序很多，功能好的也很多。 
    但是在unix如何作mirror呢？好多人并不是很清楚。其实在unix下作mirror的程序也很多，我今天讲讲使用wget来mirror 网站的后，如何转换的问题。</p>

<h2 id="toc_0">    wget的用法，hehe,相信大家都是很熟悉的吧。在这，还是从网上抄点用法过来吧，出处我忘记了,对于作者,I say sorry。</h2>

<p>wget常用参数如下 (以下资讯亦可藉由执行 wget &ndash;help获得)：</p>

<p>GNU Wget 1.5.3, 一个非交互式的网路抓档工具.
用法: wget [选项]&hellip; [URL]&hellip;</p>

<p>命令的引数使用长项目与短项目相同.</p>

<p>启动:
  -V,  &ndash;version           显示 Wget 的版本并且离开.
  -h,  &ndash;help              显示这个说明档.
  -b,  -background         在启动之後跳到背景去.
  -e,  -execute=COMMAND    执行一个 `.wgetrc&#39; 里面的 COMMAND 指令.</p>

<p>纪录档与输入的档案:
  -o,  &ndash;output-file=FILE     纪录讯息到 FILE 去.
  -a,  -append-output=FILE    增加讯息到 FILE 去.
  -d,  &ndash;debug                显示除错的输出.
  -q,  &ndash;quiet                安静模式 (不输入任何讯息).
  -v,  &ndash;verbose              冗长模式 (这是内定值).
  -nv, &ndash;non-verbose          关闭 verboseness, 但不是安静模式.
  -i,  &ndash;input-file=FILE      从 FILE 读取 URL .
  -F,  &ndash;force-html           把输入的档案当作 HTML.</p>

<p>下载:
  -t,  &ndash;tries=NUMBER           设定重复尝试 NUMBER 次 (0 是无限制).
  -O   &ndash;output-document=FILE   把文件写到 FILE 里.
  -nc, &ndash;no-clobber             不破坏已经存在的档案.
  -c,  &ndash;continue               重新取得一个已经存在的档案.
       &ndash;dot-style=STYLE        设定取回状况的显示风格.
  -N,  &ndash;timestamping           不取回比本地旧的档案.
  -S,  &ndash;server-response        显示伺服器回应状况.
       &ndash;spider                 不下载任何东西.
  -T,  &ndash;timeout=SECONDS        设定读取时超过的时间为 SECONDS 秒.
  -w,  &ndash;wait=SECONDS           在取回档案时等待 SECONDS 秒.
  -Y,  &ndash;proxy=on/off           开启或关闭 Proxy.
  -Q,  &ndash;quota=NUMBER           设定取回档案的定额限制为 NUMBER 个.</p>

<p>目录:
  -nd  &ndash;no-directories            不建立目录.
  -x,  &ndash;force-directories         强制进行目录建立的工作.
  -nH, &ndash;no-host-directories       不建立主机的目录.
  -P,  &ndash;directory-prefix=PREFIX   把档案存到 PREFIX/&hellip;
       &ndash;cut-dirs=NUMBER           忽略 NUMBER 个远端的目录元件.</p>

<p>HTTP 选项:
       &ndash;http-user=USER       设 http 使用者为 USER.
       &ndash;http-passwd=PASS     设 http 使用者的密码为 PASS.
  -C,  &ndash;cache=on/off         提供/关闭快取伺服器资料 (正常情况为提供).
       &ndash;ignore-length        忽略 `Content-Length&#39; 标头栏位.
       &ndash;proxy-user=USER      设 USER 为 Proxy 使用者名称.
       &ndash;proxy-passwd=PASS    设 PASS 为 Proxy 密码.
  -s,  &ndash;save-headers         储存 HTTP 标头成为档案.
  -U,  &ndash;user-agent=AGENT     使用 AGENT 取代 Wget/VERSION 作为识别代号.</p>

<p>FTP 选项:
       &ndash;retr-symlinks   取回 FTP 的象徵连结.
  -g,  &ndash;glob=on/off     turn file name globbing on ot off.
       &ndash;passive-ftp     使用 &ldquo;passive&rdquo; 传输模式.</p>

<p>使用递回方式的取回:
  -r,  &ndash;recursive             像是吸入 web 的取回 &ndash; 请小心使用!.
  -l,  &ndash;level=NUMBER          递回层次的最大值 (0 不限制).
       &ndash;delete-after          删除下载完毕的档案.
  -k,  &ndash;convert-links         改变没有关连的连结成为有关连.
  -m,  &ndash;mirror                开启适合用来映射的选项.
  -nr, &ndash;dont-remove-listing   不要移除 `.listing&#39; 档.</p>

<p>递回式作业的允许与拒绝选项:
  -A,  &ndash;accept=LIST                允许的扩充项目的列表.
  -R,  &ndash;reject=LIST                拒绝的扩充项目的列表.
  -D,  &ndash;domains=LIST               允许的网域列表.
       &ndash;exclude-domains=LIST       拒绝的网域列表 (使用逗号来分隔).
  -L,  &ndash;relative                   只跟随关联连结前进.
       &ndash;follow-ftp                 跟随 HTML 文件里面的 FTP 连结.
  -H,  &ndash;span-hosts                 当开始递回时便到外面的主机.
  -I,  &ndash;include-directories=LIST   允许的目录列表.
  -X,  &ndash;exclude-directories=LIST   排除的目录列表.
  -nh, &ndash;no-host-lookup             不透过 DNS 查寻主机.
  -np, &ndash;no-parent                  不追朔到起源目录.</p>

<p>范例一：mirror一个网站</p>

<p>　wget -r <a href="http://www.redhat.com">http://www.redhat.com</a></p>

<p>范例二：mirror一个网站下的某个目录：</p>

<h2 id="toc_1">　wget -r <a href="http://www.redhat.com/apps/download/">http://www.redhat.com/apps/download/</a></h2>

<pre><code>但是在实际中，现在的网站大多数是程序+数据库的模式，不象原来的那种单独的html方式，那样get下来的文件名就是不能直接访问的。(如果没有试过mirror的，估计不知我说的是怎么一回事)
我们举个以mirror 一个网站的子目录下的例子，来说说吧。此网站是一台Linux的机器，在他们的上面用是jsp+mysql的模式。
</code></pre>

<p>一、
先在你的机器上输入
wget -m -r -k -np -b &ndash;user-agent=&lsquo;Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)&rsquo; <a href="http://www.mysite.com/solution/">http://www.mysite.com/solution/</a>
      ^  ^  ^  ^   ^       ^                                                                    <sup>__欲mirror的网站的url</sup>
      |  |  |  |   |       |__访问网站使用的程序的标识（我不想让那个网站知道我用的是wget,要mirror他的站，所以就假冒ie4)
      |  |  |  |   |_____放到后台运行 (我可不想傻等)
      |  |  |  |___ 限制在当前目录下的文件（如果不设，你就死定了)
      |  |  |__转换连接(但是我没有感觉有多大的用)
      |  |__递归抓取<br/>
      |__这个要用呀，是作mirror呀
然后你先出去转转，等时间差不多了，再回来吧
二、wget结束后，你会发现，那些list.jsp?id=什么什么的，都wget了下来，文件名就是list.jsp?id=xxx存放着。
    类似这种:
    -rw-r&ndash;r&ndash;    1 root     root        30588 Jul 31 18:49 showfom.jsp?i=1525
    wget到没有错，可是在我们的机器上是不能直接访问的，这种文件名在win下也不能使用。unix对它支持，可是在apache或别的web server上不能正常访问。
    如访问 <a href="http://192.168.0.1/mirror/www.mysite.com/solution/showfom.jsp?i=1525,%E6%88%91%E4%BB%AC%E7%9A%84web">http://192.168.0.1/mirror/www.mysite.com/solution/showfom.jsp?i=1525,我们的web</a> server会认为请求showfom.jsp文件，?后面是参数，所以造成我们不能直接访问。
    说了这么半天，这才说到我要说的，就是我们如何处理这种情况。(唉，悲哀)
三、转换
    经过对测试，发现可以通过把?转换成@后，webserver可以正常访问。
    即<a href="http://192.168.0.1/mirror/www.mysite.com/solution/showfom.jsp?i=1525%E6%94%B9%E6%88%90http://192.168.0.1/mirror/www.mysite.com/solution/showfom.jsp@i=1525">http://192.168.0.1/mirror/www.mysite.com/solution/showfom.jsp?i=1525改成http://192.168.0.1/mirror/www.mysite.com/solution/showfom.jsp@i=1525</a>
    明白了这个，我们就可以编写两个脚本来实现。
1.批量改文件名
$cat &gt;/var/tmp/s.sh</p>

<h1 id="toc_2">!/bin/sh</h1>

<p>FILES=<code>ls</code><br/>
for i in $FILES ; do<br/>
  j=<code>echo $i | sed &quot;s/?/@/&quot;</code><br/>
  mv $i $j<br/>
done  </p>

<p>2.替换掉文件内容中的提示
$cat &gt;/var/tmp/s1.sh</p>

<h1 id="toc_3">!/bin/sh</h1>

<p>cat $1 |sed s/.jsp?/.jsp@/ &gt;1.bak
mv 1.bak $1</p>

<p>这两个脚本主要是利用sed的替换功能
sed s/.jsp?/.jsp@/
    |   |     |__欲改成的信息
    |   |__须换掉的信息
    |__发现并替换</p>

<p>如果是cgi?换成cgi@,asp?换成asp@,php?换成php@,具体看情况而变。</p>

<h1 id="toc_4">cd /www/mirror/solution/</h1>

<p>先把文件名改过来</p>

<h1 id="toc_5">/var/tmp/s.sh</h1>

<p>mv: <code>historylist.jsp&#39; and</code>historylist.jsp&#39; are the same file
mv: <code>index.html&#39; and</code>index.html&#39; are the same file</p>

<p>hehe,这就是不用改名的文件，我们通过分析文件，了解通过这两个文件调用才能显示文章</p>

<p>把index.htm或个别文件的内容作过滤</p>

<h1 id="toc_6">/var/tmp/s1.sh index.html</h1>

<h1 id="toc_7">/var/tmp/s1.sh historylist.jsp</h1>

<p>过滤完后，我们现在输入<a href="http://192.168.0.1/mirror/www.mysite.com/solution/,%E7%84%B6%E5%90%8E%E7%9C%8B%E7%9C%8B%EF%BC%8C%E6%98%AF%E4%B8%8D%E6%98%AF%E5%87%BA%E6%9D%A5%E4%BA%86,%E5%86%8D%E7%82%B9links%EF%BC%8C%E9%83%BD%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E4%BA%86,Ok">http://192.168.0.1/mirror/www.mysite.com/solution/,然后看看，是不是出来了,再点links，都正常访问了,Ok</a>.
在此先谢谢eist,e4gle的帮助。
注：此文很乱，可取的就只一点：就是把?替换成@,让web server能正常识别。hehe,大家不要笑我哟。
如有不足，请指教；如有兴趣，快来交流。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[icloud 邮件设置]]></title>
    <link href="bao3.org/14701463848112.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463848112.html</id>
    <content type="html"><![CDATA[
<p>适用于收件服务器的 IMAP 信息
服务器名称：imap.mail.me.com
是否需要 SSL：是
如果您在使用 SSL 时看到错误信息，请尝试使用 TLS。
端口：993
用户名：通常是您的 iCloud 电子邮件地址的名称部分（例如 emilyparker，而不是 <a href="mailto:emilyparker@icloud.com">emilyparker@icloud.com</a>）。如果仅使用 iCloud 电子邮件地址时您的电子邮件客户端无法连接 iCloud，请尝试使用完整地址。
密码：您的 iCloud 密码
适用于发件服务器的 SMTP 信息
服务器名称：smtp.mail.me.com
是否需要 SSL：是
如果您在使用 SSL 时看到错误信息，请尝试使用 TLS 或 STARTTLS。
端口：587
是否需要 SMTP 鉴定：是
用户名：您的完整 iCloud 电子邮件地址（例如，<a href="mailto:emilyparker@icloud.com">emilyparker@icloud.com</a>，而不是 emilyparker）
密码：您的 iCloud 密码</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brew Cask 安装软件]]></title>
    <link href="bao3.org/14701463848186.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463848186.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-Bash">brew tap caskroom/cask
brew tap caskroom/versions
brew install homebrew/fuse/bindfs
brew install proxychains-ng shadowsocks-libv   android-platform-tools fswatch
brew cask install qq  neteasemusic   telegram google-chrome iterm2  mpv  squirrel vmware-fusion flux enpass  omnidisksweeper java  diskmaker-x osxfuse  keka  ifunbox airflow   aria2gui surge 
brew install macvim --with-cscope --with-lua --override-system-vim
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己折腾 FreeNAS@ThinkPad x201i 的记录]]></title>
    <link href="bao3.org/14701463848256.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463848256.html</id>
    <content type="html"><![CDATA[
<p>这些记录没有任何意义，请忽略</p>

<pre><code class="language-Bash">cp -Rp acpi_ibm* /boot/kernel/
cp -RP acpi_video.ko* /boot/kernel/
cp -Rp iwn1000fw.ko* /boot/kernel/
cp -Rp if_iwn.ko* /boot/kernel/
cp -Rp wlan* /boot/kernel/
cp -Rp fuse.ko* /boot/kernel/
sed -i &quot;.bak&quot; &#39;s/yes/no/g&#39; /usr/local/etc/pkg/repos/local.conf
sed -i &quot;.bak&quot; &#39;s/no/yes/g&#39; /usr/local/etc/pkg/repos/FreeBSD.conf

pkg update
pkg install vim-lite proxychains-ng shadowsocks-libev aria2

vi /boot/loader.conf

#######
acpi_ibm_load=&quot;YES&quot;
acpi_video_load=&quot;YES&quot;
if_iwn_load=&quot;YES&quot;
iwn1000fw_load=&quot;YES&quot;
snd_ich_load=&quot;YES&quot;
###########


saver=&quot;green&quot; blanktime=&quot;300&quot; scrnmap=&quot;NO&quot;
powerd_enable=&quot;YES&quot;
powerd_flags=&quot;-i 80 -p 200 -b adaptive -a adaptive -n adaptive&quot;

performance_cx_lowest=&quot;C3&quot;
economy_cx_lowest=&quot;C3&quot;
performance_cpu_freq=&quot;HIGH&quot;


sysctl -a | grep cx_
/etc/sysctl.conf
hw.acpi.cpu.cx_lowest=C3

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 上使用 Syncthing 同步文档]]></title>
    <link href="bao3.org/14701463848381.html"/>
    <updated>2016-08-02T21:59:44+08:00</updated>
    <id>bao3.org/14701463848381.html</id>
    <content type="html"><![CDATA[
<p>最早的时候个人同步我使用的是 BTsync ，但这家伙后来改版后有诸多不便，于是转投了我一直看好的另一个同步工具 &mdash;- Syncthing 。开源且多平台 （ iOS 上不行，不过 iOS 除了照片也没什么可以同步的了 ），我最喜欢的就是可以自建一个 relay 。详细使用上比较简单，我今天只记录一下我在 Mac 上的操作。</p>

<p>操作需要使用 iTerm 或者 Terminal 请自备。</p>

<h2 id="toc_0">使用 Brew Cask 安装</h2>

<p>其实你也可以自己下载安装包 (<a href="https://github.com/syncthing/syncthing/releases)%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%E6%8A%8A">https://github.com/syncthing/syncthing/releases)，解压后把</a>&ldquo; syncthing &rdquo; 这个可执行文件放到 <code>/usr/local/bin</code> 。（ 我建议你养成好习惯，所有自己下载安装的终端都丢这里 ）</p>

<p>如果你有了 brew 则可以</p>

<pre><code>brew tap caskroom/cask
brew tap caskroom/versions
brew cask install syncthing 

</code></pre>

<p>会看到下图
<img src="media/14623502546429/14623510408640.jpg" alt="syncthing安装"/></p>

<p>然后进入上图中的 <code>open /opt/homebrew-cask/Caskroom/syncthing/0.12.22</code> 然后进入安装文件夹（如果你有多个版本，则进入最高的那个就可以了），找到 <code>syncthing.plist</code> ，通常位置安装目录的 <code>etc/macosx-launchd</code> 。</p>

<h2 id="toc_1">修改配置文件</h2>

<p>在 Finder 里，不要选中任何文件的情况下，点击如下图标，拷贝为路径，如果你的系统没有这个选项，请试着按下 Option 键。
<img src="media/14623502546429/14623515346988.jpg" alt=""/></p>

<p>接着在 iTerm 或者 Terminal 里输入</p>

<pre><code>cd $(pbpaste)
sed -i .bak &quot;s/USERNAME/$(whoami)/g&quot; ./syncthing.plist
sed -i .bak &quot;s/\Users\/$(whoami)\/bin/usr\/local\/bin/g&quot; ./syncthing.plist
sed -n &#39;/Users/p&#39; ./syncthing.plist
sed -n &#39;/local/p&#39; ./syncthing.plist
</code></pre>

<p>你应该会看到输出了带你的用户名的几行以及带有 syncthing的一行：</p>

<pre><code>        &lt;string&gt;/Users/bao3&lt;/string&gt;
    &lt;string&gt;/Users/bao3/Library/Logs/Syncthing.log&lt;/string&gt;
    &lt;string&gt;/Users/bao3/Library/Logs/Syncthing-Errors.log&lt;/string&gt;
        &lt;string&gt;/usr/local/bin/syncthing&lt;/string&gt;
</code></pre>

<h2 id="toc_2">加载启动文件</h2>

<p>比较简单，我是直接 copy 过去:</p>

<pre><code> cp syncthing.plist  ~/Library/LaunchAgents/syncthing.plist
  launchctl load ~/Library/LaunchAgents/syncthing.plist 
</code></pre>

<p>随后会打开网页，让你登录 <a href="http://127.0.0.1:8384">http://127.0.0.1:8384</a></p>

]]></content>
  </entry>
  
</feed>
